{"version":3,"sources":["data/ibm-fed-branches.js","context/TemperatureScaleContext.js","components/Nav/index.js","components/Nav/Nav.js","components/WeatherCard/index.js","components/WeatherCard/WeatherCard.js","util/weeHelpers.js","App.js","serviceWorker.js","index.js"],"names":["name","coords","TemperatureScaleContext","createContext","scaleReducer","state","action","type","Error","TemperatureScaleProvider","children","useReducer","scale","dispatch","Provider","value","Nav","React","useContext","aria-label","href","prefix","onClick","className","WeatherCard","location","useState","refetch","setRefetch","data","setData","loading","setLoading","error","setError","useEffect","a","console","log","process","API_PROXY","fetch","response","ok","json","fetchWeatherData","useWeatherApi","getTemperature","temp","toFixed","getTemperatureForScale","renderCard","timezone","loadingSkeleton","role","tabIndex","Tile","moment","tz","format","currently","temperature","summary","summarySplit","split","length","pop","join","formatSummary","daily","temperatureMin","temperatureMax","id","precipProbability","key","uvIndex","App","branches","map","branch","index","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAAe,GACb,CACEA,KAAM,aACNC,OAAQ,4B,OCDNC,EAA0BC,0BAEhC,SAASC,EAAaC,EAAOC,GAC3B,OAAQA,EAAOC,MACb,IAAK,IAEL,IAAK,IACH,OAAOD,EAAOC,KAQhB,QACE,MAAM,IAAIC,OAIhB,IAWeC,EAXkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACvBC,qBAAWP,EAAc,KADF,mBAC1CQ,EAD0C,KACnCC,EADmC,KAGjD,OACE,kBAACX,EAAwBY,SAAzB,CAAkCC,MAAO,CAAEH,QAAOC,aAC/CH,I,iBCzBQM,ECUH,WAAO,IAAD,EACYC,IAAMC,WAAWhB,GAArCU,EADQ,EACRA,MAAOC,EADC,EACDA,SAKf,OACE,kBAAC,SAAD,CAAQM,aAAW,gCACjB,kBAAC,aAAD,CAAYC,KAAK,IAAIC,OAAO,WAA5B,UAGA,kBAAC,mBAAD,CAAkBF,aAAW,cAC3B,kBAAC,iBAAD,qBAEF,kBAAC,kBAAD,KACE,kBAAC,qBAAD,CACEA,aAAW,sDACXG,QAAS,kBAbfT,EAAS,CAAEN,KAAgB,MAAVK,EAAgB,IAAM,QAcjC,0BAAMW,UAAS,+CAA0CX,IACvD,kBAAC,IAAD,MACCA,EAFH,Y,qGC5BKY,EC4CK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACNR,IAAMS,UAAS,GADT,mBAC7BC,EAD6B,KACpBC,EADoB,OAlChB,SAAC,EAAYD,GAAa,IAAvB1B,EAAsB,EAAtBA,OAAsB,EACrBgB,IAAMS,SAAS,MADM,mBACtCG,EADsC,KAChCC,EADgC,OAEfb,IAAMS,UAAS,GAFA,mBAEtCK,EAFsC,KAE7BC,EAF6B,OAGnBf,IAAMS,UAAS,GAHI,mBAGtCO,EAHsC,KAG/BC,EAH+B,KA+B7C,OA1BAjB,IAAMkB,UAAU,YACQ,sCAAG,8BAAAC,EAAA,4DACvBJ,GAAW,GACXE,GAAS,GAETG,QAAQC,IAAI,0BAA2BC,8CAAYC,WAJ5B,kBAMEC,MAAM,GAAD,OACvBF,8CAAYC,UADW,6EACmEvC,IAP1E,UAMfyC,EANe,OASrBL,QAAQC,IAAI,aAAcI,IACtBA,EAASC,GAVQ,kCAWAD,EAASE,OAXT,QAWbf,EAXa,OAYnBC,EAAQD,GAZW,wBAcnBK,GAAS,GAdU,0DAiBrBA,GAAS,GAjBY,QAoBvBF,GAAW,GApBY,wDAAH,qDAsBtBa,IACC,CAAC5C,EAAQ0B,IAEL,CAAEE,OAAME,UAASE,SAMSa,CAAcrB,EAAUE,GAAjDE,EAH4B,EAG5BA,KAAME,EAHsB,EAGtBA,QAASE,EAHa,EAGbA,MAGfrB,EAAUK,IAAMC,WAAWhB,GAA3BU,MACFmC,EAAiB,SAAAC,GACrB,OCdkC,SAACjC,EAAOH,GAE5C,OADAyB,QAAQC,IAAI,UAAW1B,GACfA,GACN,IAAK,IACH,OAAwB,GAAdG,EAAQ,IAAW,GAAGkC,QAAQ,GAC1C,IAAK,IACH,OAAOlC,EAAMkC,QAAQ,GAKvB,QACE,MAAMzC,MAAM,qBAAD,OAAsBI,EAAtB,wBDENsC,CAAuBF,EAAMpC,IAGhCuC,EAAa,SAAC,GAAuC,IClDtBC,EDkDqB,IAApCrB,eAAoC,aAApBE,aAAoB,SAClDoB,EAAkB,yBAAK9B,UAAU,uBACvC,OACE,yBAAKA,UAAU,uDACXU,EAkGA,yBACEV,UAAU,8BACVD,QAAS,kBAAMM,GAAYD,IAC3B2B,KAAK,SACLC,SAAU,GAJZ,gCAME,yBAAKhC,UAAU,gBACb,kBAAC,IAAD,MADF,UAvGF,kBAACiC,EAAA,KAAD,CAAMjC,UAAU,yBAAyBgC,SAAU,GACjD,yBAAKhC,UAAU,wBACb,wBAAIA,UAAU,+BAA+BE,EAASzB,MACtD,yBAAKuB,UAAU,mCACb,yBAAKA,UAAU,kCACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,MACCQ,EACGsB,GC/DeD,EDgESvB,EAAKuB,SC/D5CK,MACJC,GAAGN,GACHO,OAAO,WD+DO5B,EACC,yBAAKR,UAAU,mBAAmB8B,GAElC,yBAAK9B,UAAU,mBACb,kBAAC,IAAD,QAIN,yBACEA,UAAS,+BACPQ,EAAU,UAAY,KAExB,yBAAKR,UAAU,+BAAf,aACA,yBAAKA,UAAU,qCACZQ,EACGsB,EADI,UAEDN,EAAelB,EAAK+B,UAAUC,aAF7B,SAIV,yBAAKtC,UAAU,qCACZQ,EAAUsB,EAAkBxB,EAAK+B,UAAUE,WAIlD,yBAAKvC,UAAU,+BACb,6BACE,yBAAKA,UAAU,gBAAf,SACA,yBAAKA,UAAU,kBAEZQ,EACG,CAACsB,EAAiBA,GCjFb,SAAAS,GAC3B,IAAMC,EAAeD,EAAQE,MAAM,KAKnC,OAHqD,IAAjDD,EAAaA,EAAaE,OAAS,GAAGA,QACxCF,EAAaG,MAERH,EAAaI,OD4EEC,CAAcvC,EAAKwC,MAAMxC,KAAK,GAAGiC,WAGzC,yBAAKvC,UAAU,eACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iCAAf,OACA,yBAAKA,UAAU,iCACZQ,EACGsB,EADI,UAEDN,EACDlB,EAAKwC,MAAMxC,KAAK,GAAGyC,gBAHjB,UAOZ,yBAAK/C,UAAU,0BACb,yBAAKA,UAAU,iCAAf,OACA,yBAAKA,UAAU,iCACZQ,EACGsB,EADI,UAEDN,EACDlB,EAAKwC,MAAMxC,KAAK,GAAG0C,gBAHjB,WAQd,yBAAKhD,UAAU,qBACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iCAAf,SACA,yBACEA,UAAU,gCACViD,GAAG,iBACFzC,EACGsB,EACA,CACExB,EAAKwC,MAAMxC,KAAK,GAAG4C,kBAAkBxB,QAAQ,GAC7C,0BAAMyB,IAAI,IAAInD,UAAU,2BAAxB,QAMV,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iCAAf,MACA,yBAAKA,UAAU,iCACZQ,EACGsB,EACAxB,EAAKwC,MAAMxC,KAAK,GAAG8C,QAAQ1B,QAAQ,YAyB7D,OAAoBE,EAAhBpB,EAA2B,CAAEA,SAAS,GAEtCE,EAAyB,CAAEA,OAAO,GAEpB,CAAEF,SAAS,KEpJhB6C,EAxBH,WACV,OACE,yBAAKrD,UAAU,kBACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,UAAD,KACE,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,2CAAd,2BAIF,yBAAKA,UAAU,WACZsD,EAASC,IAAI,SAACC,EAAQC,GAAT,OACZ,kBAAC,EAAD,CAAaN,IAAKK,EAAO/E,KAAMyB,SAAUsD,YCTrCE,QACW,cAA7BC,OAAOzD,SAAS0D,UAEe,UAA7BD,OAAOzD,SAAS0D,UAEhBD,OAAOzD,SAAS0D,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b675a9a2.chunk.js","sourcesContent":["export default [\n  {\n    name: 'Austin, TX',\n    coords: '30.4017091, -97.7151757',\n  },\n  // {\n  //   name: 'Baton Rouge, LA',\n  //   coords: '30.4516853,-91.1899907',\n  // },\n  // {\n  //   name: 'Böblingen, Germany',\n  //   coords: '48.6658714,9.0395506',\n  // },\n  // {\n  //   name: 'Chennai, India',\n  //   coords: '13.08784,80.27847',\n  // },\n  // {\n  //   name: 'Dublin, Ireland',\n  //   coords: '53.4156307,-6.4160302',\n  // },\n  // {\n  //   name: 'Endicott, NY',\n  //   coords: '42.104937,-76.047724',\n  // },\n  // {\n  //   name: 'Hursley, UK',\n  //   coords: '51.026673,-1.398633',\n  // },\n  // {\n  //   name: 'Littleton, MA',\n  //   coords: '42.5485148,-71.4686236',\n  // },\n  // {\n  //   name: 'Poughkeepsie, NY',\n  //   coords: '41.6593453,-73.930273',\n  // },\n  // {\n  //   name: 'Raleigh, NC',\n  //   coords: '35.901154,-78.85835',\n  // },\n  // {\n  //   name: 'Rochester, MN',\n  //   coords: '44.0794929,-92.5087289',\n  // },\n  // {\n  //   name: 'San Francisco, CA',\n  //   coords: '37.791648,-122.3984065',\n  // },\n  // {\n  //   name: 'San Jose, CA',\n  //   coords: '37.1858909,-121.7574605',\n  // },\n];\n","import React, { createContext, useReducer } from 'react';\n\nconst TemperatureScaleContext = createContext();\n\nfunction scaleReducer(state, action) {\n  switch (action.type) {\n    case 'C':\n      return action.type;\n    case 'F':\n      return action.type;\n    /*\n      TODO: We could extend the app by adding a dropdown\n      so that multiple temperature scales could be selected\n      such as Kelvin\n    case 'K':\n      return action.type;\n    */\n    default:\n      throw new Error();\n  }\n}\n\nconst TemperatureScaleProvider = ({ children }) => {\n  const [scale, dispatch] = useReducer(scaleReducer, 'C');\n\n  return (\n    <TemperatureScaleContext.Provider value={{ scale, dispatch }}>\n      {children}\n    </TemperatureScaleContext.Provider>\n  );\n};\n\nexport { TemperatureScaleContext };\nexport default TemperatureScaleProvider;\n","import Nav from './Nav';\n\nexport default Nav;\n","import React from 'react';\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n  HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n} from 'carbon-components-react/lib/components/UIShell';\nimport { TemperatureScaleContext } from '../../context/TemperatureScaleContext';\nimport Temperature16 from '@carbon/icons-react/lib/temperature/16';\n\nconst Nav = () => {\n  const { scale, dispatch } = React.useContext(TemperatureScaleContext);\n\n  const toggleTemperatureScale = () =>\n    dispatch({ type: scale === 'C' ? 'F' : 'C' });\n\n  return (\n    <Header aria-label=\"FED@IBM Dublin | React Hooks\">\n      <HeaderName href=\"#\" prefix=\"FED@IBM\">\n        Dublin\n      </HeaderName>\n      <HeaderNavigation aria-label=\"navigation\">\n        <HeaderMenuItem>React Hooks</HeaderMenuItem>\n      </HeaderNavigation>\n      <HeaderGlobalBar>\n        <HeaderGlobalAction\n          aria-label=\"toggle temperature scale from celsius to fahrenheit\"\n          onClick={() => toggleTemperatureScale()}>\n          <span className={`toggle-temperature-scale scale-type__${scale}`}>\n            <Temperature16 />\n            {scale}°\n          </span>\n        </HeaderGlobalAction>\n      </HeaderGlobalBar>\n    </Header>\n  );\n};\n\nexport default Nav;\n","import WeatherCard from './WeatherCard';\n\nexport default WeatherCard;\n","import React from 'react';\nimport { Tile } from 'carbon-components-react/lib/components/Tile';\nimport Restart16 from '@carbon/icons-react/lib/restart/16';\nimport Time16 from '@carbon/icons-react/lib/time/16';\nimport Cloud32 from '@carbon/icons-react/lib/cloud/32';\nimport {\n  getLocalTimeForTimezone,\n  formatSummary,\n  getTemperatureForScale,\n} from '../../util/weeHelpers';\nimport { TemperatureScaleContext } from '../../context/TemperatureScaleContext';\n\nconst useWeatherApi = ({ coords }, refetch) => {\n  const [data, setData] = React.useState(null);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(false);\n\n  React.useEffect(() => {\n    const fetchWeatherData = async () => {\n      setLoading(true);\n      setError(false);\n\n      console.log('process.env.API_PROXY: ', process.env.API_PROXY);\n      try {\n        const response = await fetch(\n          `${process.env.API_PROXY}https://api.darksky.net/forecast/db1d17eb3b798d4881121dee107183cc/${coords}`\n        );\n        console.log('response: ', response);\n        if (response.ok) {\n          const data = await response.json();\n          setData(data);\n        } else {\n          setError(true);\n        }\n      } catch (error) {\n        setError(true);\n      }\n\n      setLoading(false);\n    };\n    fetchWeatherData();\n  }, [coords, refetch]);\n\n  return { data, loading, error };\n};\n\nconst WeatherCard = ({ location }) => {\n  const [refetch, setRefetch] = React.useState(false);\n  // Fetch weather data for this location\n  const { data, loading, error } = useWeatherApi(location, refetch);\n\n  // Grab the temperature scale context to convert C° to F° if need be\n  const { scale } = React.useContext(TemperatureScaleContext);\n  const getTemperature = temp => {\n    return getTemperatureForScale(temp, scale);\n  };\n\n  const renderCard = ({ loading = true, error = false }) => {\n    const loadingSkeleton = <div className=\"bx--skeleton__text\"></div>;\n    return (\n      <div className=\"bx--col-sm-4 bx--col-md-4 bx--col-lg-4 bx--col-xl-2\">\n        {!error ? (\n          <Tile className=\"weather-card-container\" tabIndex={0}>\n            <div className=\"weather-center__card\">\n              <h5 className=\"weather-center__card--title\">{location.name}</h5>\n              <div className=\"weather-center__card--currently\">\n                <div className=\"currently__time-icon-container\">\n                  <div className=\"currently__time\">\n                    <Time16 />\n                    {loading\n                      ? loadingSkeleton\n                      : getLocalTimeForTimezone(data.timezone)}\n                  </div>\n                  {loading ? (\n                    <div className=\"currently__icon\">{loadingSkeleton}</div>\n                  ) : (\n                    <div className=\"currently__icon\">\n                      <Cloud32 />\n                    </div>\n                  )}\n                </div>\n                <div\n                  className={`currently__next-hour ${\n                    loading ? 'loading' : ''\n                  }`}>\n                  <div className=\"currently__next-hour--label\">Next hour</div>\n                  <div className=\"currently__next-hour--temperature\">\n                    {loading\n                      ? loadingSkeleton\n                      : `${getTemperature(data.currently.temperature)}°`}\n                  </div>\n                  <div className=\"currently__next-hour--description\">\n                    {loading ? loadingSkeleton : data.currently.summary}\n                  </div>\n                </div>\n              </div>\n              <div className=\"weather-center__card--daily\">\n                <div>\n                  <div className=\"daily__label\">Today</div>\n                  <div className=\"daily__summary\">\n                    {/* eslint-disable-next-line no-useless-escape */}\n                    {loading\n                      ? [loadingSkeleton, loadingSkeleton]\n                      : formatSummary(data.daily.data[0].summary)}\n                  </div>\n                </div>\n                <div className=\"daily__info\">\n                  <div className=\"daily__info-group\">\n                    <div className=\"daily__info-group-item\">\n                      <div className=\"daily__info-group-item--label\">Min</div>\n                      <div className=\"daily__info-group-item--value\">\n                        {loading\n                          ? loadingSkeleton\n                          : `${getTemperature(\n                              data.daily.data[0].temperatureMin\n                            )}°`}\n                      </div>\n                    </div>\n                    <div className=\"daily__info-group-item\">\n                      <div className=\"daily__info-group-item--label\">Max</div>\n                      <div className=\"daily__info-group-item--value\">\n                        {loading\n                          ? loadingSkeleton\n                          : `${getTemperature(\n                              data.daily.data[0].temperatureMax\n                            )}°`}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"daily__info-group\">\n                    <div className=\"daily__info-group-item\">\n                      <div className=\"daily__info-group-item--label\">Prec.</div>\n                      <div\n                        className=\"daily__info-group-item--value\"\n                        id=\"precipitation\">\n                        {loading\n                          ? loadingSkeleton\n                          : [\n                              data.daily.data[0].precipProbability.toFixed(0),\n                              <span key=\"%\" className=\"small-percentage-symbol\">\n                                %\n                              </span>,\n                            ]}\n                      </div>\n                    </div>\n                    <div className=\"daily__info-group-item\">\n                      <div className=\"daily__info-group-item--label\">UV</div>\n                      <div className=\"daily__info-group-item--value\">\n                        {loading\n                          ? loadingSkeleton\n                          : data.daily.data[0].uvIndex.toFixed(0)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Tile>\n        ) : (\n          <div\n            className=\"weather-center__card--error\"\n            onClick={() => setRefetch(!refetch)}\n            role=\"button\"\n            tabIndex={0}>\n            Whoops, an error has ocurred!\n            <div className=\"error__retry\">\n              <Restart16 />\n              Retry\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (loading) return renderCard({ loading: true });\n\n  if (error) return renderCard({ error: true });\n\n  return renderCard({ loading: false });\n};\n\nexport default WeatherCard;\n","import moment from 'moment-timezone';\n\n/**\n * A wee function for grabbing the local time for a given timezone\n * @param {String} timezone - an tz database timezone - See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n * @returns {String} time in HH:mm format - E.g. 14:30\n */\nexport const getLocalTimeForTimezone = timezone => {\n  return moment()\n    .tz(timezone)\n    .format('HH:mm');\n};\n\n/**\n * A wee function for removing the full stop at the end of weather summary\n * cause I couldn't get .trimRight() to work properly :\\\n * So instead of: 'Humid and partly cloudy throughout the day.'\n * we get:        'Humid and partly cloudy throughout the day'\n * @param {String} summary\n * @returns {String}\n */\nexport const formatSummary = summary => {\n  const summarySplit = summary.split('.');\n\n  if (summarySplit[summarySplit.length - 1].length === 0) {\n    summarySplit.pop();\n  }\n  return summarySplit.join();\n};\n\n/**\n * A wee function for converting the temperature returned from\n * the api into whatever the global temperature scale is at that time\n * e.g. celcius (C) / fahrenheit (F)\n * NOTE: the temperature is returned as fahrenheit by default so no need to\n * convert if F is the global scale\n * @param {number} value\n * @param {number} scale\n * @returns {number}\n */\nexport const getTemperatureForScale = (value, scale) => {\n  console.log('scale: ', scale);\n  switch (scale) {\n    case 'C':\n      return (((value - 32) * 5) / 9).toFixed(0);\n    case 'F':\n      return value.toFixed(0);\n    /* TODO: We could add a dropdown to select other scales in the future, e.g.\n      case 'kelvin':\n        return ...;\n    */\n    default:\n      throw Error(`temperature scale ${scale} is not recognized`);\n  }\n};\n","import React from 'react';\nimport { Content } from 'carbon-components-react/lib/components/UIShell';\nimport branches from './data/ibm-fed-branches';\nimport TemperatureScaleProvider from './context/TemperatureScaleContext';\nimport Nav from './components/Nav';\nimport WeatherCard from './components/WeatherCard';\n\nconst App = () => {\n  return (\n    <div className=\"app theme--g90\">\n      <TemperatureScaleProvider>\n        <Nav />\n        <Content>\n          <div className=\"bx--grid bx--grid--no-gutter\">\n            <div className=\"bx--row\">\n              <h1 className=\"bx--col-sm-4 bx--col-md-8 bx--col-lg-16\">\n                FED@IBM Weather Center\n              </h1>\n            </div>\n            <div className=\"bx--row\">\n              {branches.map((branch, index) => (\n                <WeatherCard key={branch.name} location={branch} />\n              ))}\n            </div>\n          </div>\n        </Content>\n      </TemperatureScaleProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}